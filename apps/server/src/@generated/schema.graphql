# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthorizationToken {
  token: String!
}

type CourseCount {
  semesters: Int!
}

type Course {
  courseNo: ID!
  abbrName: String!
  courseNameEn: String!
  courseNameTh: String!
  courseDescEn: String
  courseDescTh: String
  courseCondition: String!
  credit: Float!
  creditHours: String!
  department: String!
  faculty: String!
  genEdType: GenEdType!
  semesters: [Semester!]!
  _count: CourseCount!
}

enum GenEdType {
  SO
  HU
  SC
  IN
  NO
}

type SemesterCount {
  courses: Int!
}

type Semester {
  id: ID!
  year: Int!
  semester: Int!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  courses: [Course!]!
  _count: SemesterCount!
  totalCredits: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserCount {
  semesters: Int!
}

type User {
  id: ID!
  username: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  semesters: [Semester!]!
  _count: UserCount!
}

type PublicCourse {
  courseNo: ID!
  abbrName: String!
  courseNameEn: String!
  courseNameTh: String!
  courseDescEn: String
  courseDescTh: String
  courseCondition: String!
  credit: Float!
  creditHours: String!
  department: String!
  faculty: String!
  genEdType: GenEdType!
}

type Query {
  courses(where: CourseWhereInput, orderBy: [CourseOrderByWithRelationInput!], cursor: CourseWhereUniqueInput, take: Int, skip: Int, distinct: [CourseScalarFieldEnum!]): [Course!]!
  searchCourses(query: String!, take: Int!): [PublicCourse!]!
  allMyCourses: [PublicCourse!]!
  mySemesters: [Semester!]!
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  me: User!
  computeChecklist: String!
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
  courseNo: StringFilter
  abbrName: StringFilter
  courseNameEn: StringFilter
  courseNameTh: StringFilter
  courseDescEn: StringNullableFilter
  courseDescTh: StringNullableFilter
  courseCondition: StringFilter
  credit: FloatFilter
  creditHours: StringFilter
  department: StringFilter
  faculty: StringFilter
  genEdType: EnumGenEdTypeFilter
  semesters: SemesterListRelationFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input EnumGenEdTypeFilter {
  equals: GenEdType
  in: [GenEdType!]
  notIn: [GenEdType!]
  not: NestedEnumGenEdTypeFilter
}

input NestedEnumGenEdTypeFilter {
  equals: GenEdType
  in: [GenEdType!]
  notIn: [GenEdType!]
  not: NestedEnumGenEdTypeFilter
}

input SemesterListRelationFilter {
  every: SemesterWhereInput
  some: SemesterWhereInput
  none: SemesterWhereInput
}

input SemesterWhereInput {
  AND: [SemesterWhereInput!]
  OR: [SemesterWhereInput!]
  NOT: [SemesterWhereInput!]
  id: StringFilter
  year: IntFilter
  semester: IntFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  courses: CourseListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  username: StringFilter
  password: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  semesters: SemesterListRelationFilter
}

input CourseListRelationFilter {
  every: CourseWhereInput
  some: CourseWhereInput
  none: CourseWhereInput
}

input CourseOrderByWithRelationInput {
  courseNo: SortOrder
  abbrName: SortOrder
  courseNameEn: SortOrder
  courseNameTh: SortOrder
  courseDescEn: SortOrder
  courseDescTh: SortOrder
  courseCondition: SortOrder
  credit: SortOrder
  creditHours: SortOrder
  department: SortOrder
  faculty: SortOrder
  genEdType: SortOrder
  semesters: SemesterOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input SemesterOrderByRelationAggregateInput {
  _count: SortOrder
}

input CourseWhereUniqueInput {
  courseNo: String
}

enum CourseScalarFieldEnum {
  courseNo
  abbrName
  courseNameEn
  courseNameTh
  courseDescEn
  courseDescTh
  courseCondition
  credit
  creditHours
  department
  faculty
  genEdType
}

input UserOrderByWithRelationInput {
  id: SortOrder
  username: SortOrder
  password: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  semesters: SemesterOrderByRelationAggregateInput
}

input UserWhereUniqueInput {
  id: String
  username: String
}

enum UserScalarFieldEnum {
  id
  username
  password
  createdAt
  updatedAt
}

type Mutation {
  login(username: String!, password: String!): AuthorizationToken!
  register(username: String!, password: String!): AuthorizationToken!
  createSemester(year: Int!, semester: Int!): Semester!
  addCourse(courseNo: String!, semesterId: String!): Semester!
  removeCourse(courseNo: String!, semesterId: String!): Semester!
}